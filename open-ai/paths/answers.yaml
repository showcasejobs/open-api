base:

  post:

    operationId: answers.create
    summary: Create answer
    description: |
      Answers the specified question using the provided documents and examples.

      The endpoint first [searches](https://beta.openai.com/docs/api-reference/searches) over provided documents or files to find relevant context.
      The relevant context is combined with the provided examples and question to create the prompt for [completion](https://beta.openai.com/docs/api-reference/completions).

      [See More](https://beta.openai.com/docs/api-reference/classifications/create)
    tags:
      - Answers
    security:
      - bearer: []
      - basic: []
    parameters:
      - $ref: ../index.yaml#/components/parameters/organization
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              model:
                type: string
                description: |
                  ID of the engine to use for completion.
                example: davinci
              question:
                type: string
                description: |
                  Question to get answered.
                example: which puppy is happy?
              examples:
                type: array
                items:
                  type: array
                  minItems: 2
                  maxItems: 2
                  items:
                    type: string
                description: |
                  List of (question, answer) pairs that will help steer the model towards the tone and answer format you'd like.
                  We recommend adding 2 to 3 examples.
                example:
                  - - What is human life expectancy in the United States?
                    - 78 years.
              examples_context:
                type: string
                example: In 2017, U.S. life expectancy was 78.6 years.
                description: |
                  A text snippet containing the contextual information used to generate the answers for the `examples` you provide.
              documents:
                type: array
                items:
                  type: string
                example:
                  - Puppy A is happy.
                  - Puppy B is sad.
                description: |
                  List of documents from which the answer for the input `question` should be derived.
                  If this is an empty list, the question will be answered based on the question-answer examples.

                  You should specify either `documents` or a `file`, but not both.
              file:
                type: string
                description: |
                  The ID of an uploaded file that contains documents to search over. See [upload file](https://beta.openai.com/docs/api-reference/files/upload) for how to upload a file of the desired format and purpose.

                  You should specify either `documents` or a `file`, but not both.
                example: file-ccdDZrC3iZVNiQVeEA6Z66wf
              search_model:
                type: string
                default: ada
                description: |
                  ID of the engine to use for [Search](https://beta.openai.com/docs/api-reference/searches/create).
              max_rerank:
                type: integer
                minimum: 1
                default: 200
                description: |
                  The maximum number of documents to be ranked by [Search](https://beta.openai.com/docs/api-reference/searches/create) when using `file`.
                  Setting it to a higher value leads to improved accuracy but with increased latency and cost.
              temperature:
                type: number
                default: 0
                minimum: 0
                maximum: 1
                description: |
                  What [sampling temperature](https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277) to use.
                  Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer.
              logprobs:
                type: integer
                nullable: true
                default: null
                description: |
                  Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens.
                  For example, if `logprobs` is 10, the API will return a list of the 10 most likely tokens.
                  The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.

                  When `logprobs` is set, `completion` will be automatically added into `expand` to get the logprobs.
              max_tokens:
                type: integer
                minimum: 1
                default: 16
                description: |
                  The maximum number of tokens allowed for the generated answer.
              stop:
                oneOf:
                  - type: string
                  - type: array
                    items:
                      type: string
                    maxItems: 4
                nullable: true
                default: null
                description: |
                  Up to 4 sequences where the API will stop generating further tokens.
                  The returned text will not contain the stop sequence.
              n:
                type: integer
                minimum: 1
                default: 1
                description: |
                  How many answers to generate for each question.
              logit_bias:
                $ref: ../index.yaml#/components/schemas/logitBias
              return_metadata:
                type: boolean
                default: false
                description: |
                  A special boolean flag for showing metadata.
                  If set to `true`, each document entry in the returned JSON will contain a "metadata" field.

                  This flag only takes effect when `file` is set.
              return_prompt:
                type: boolean
                default: false
                description: |
                  If set to `true`, the returned JSON will include a "prompt" field containing the final prompt that was used to request a completion.
                  This is mainly useful for debugging purposes.
              expand:
                type: array
                items:
                  type: string
                default: []
                description: |
                  If an object name is in the list, we provide the full information of the object; otherwise, we only provide the object ID.
                  Currently we support `completion` and `file` objects for expansion.
            additionalProperties: false
            required:
              - model
              - question
              - examples
              - examples_context
    responses:
      200:
        description: Ok
        content:
          application/json:
            schema:
              type: object
              properties:
                answers:
                  type: array
                  items:
                    type: string
                  example:
                    - puppy A.
                completion:
                  type: string
                  example: cmpl-2euVa1kmKUuLpSX600M41125Mo9NI
                model:
                  type: string
                  example: curie:2020-05-03
                object:
                  type: string
                  example: answer
                search_model:
                  type: string
                  example: ada
                selected_documents:
                  type: array
                  items:
                    type: object
                    properties:
                      document:
                        type: integer
                      text:
                        type: string
                      metadata: {}
                    additionalProperties: false
                    required:
                      - document
                      - text
                  example:
                    - document: 0
                      text: "Puppy A is happy. "
                    - document: 1
                      text: "Puppy B is sad. "
              additionalProperties: false
              required:
                - answers
                - completion
                - model
                - object
                - search_model
                - selected_documents
