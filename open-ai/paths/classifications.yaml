base:

  post:

    operationId: classifications.create
    summary: Create classification
    description: |
      Classifies the specified query using provided examples.

      The endpoint first [searches](https://beta.openai.com/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query.
      Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](https://beta.openai.com/docs/api-reference/completions) endpoint.

      Labeled examples can be provided via an uploaded file, or explicitly listed in the request using the examples parameter for quick tests and small scale use cases.

      [See More](https://beta.openai.com/docs/api-reference/classifications/create)
    tags:
      - Classifications
    security:
      - bearer: []
      - basic: []
    parameters:
      - $ref: ../index.yaml#/components/parameters/organization
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              model:
                type: string
                description: |
                  ID of the engine to use for completion.
                example: davinci
              query:
                type: string
                description: |
                  Query to be classified.
                example: It is a raining day :(
              examples:
                type: array
                items:
                  type: array
                  minItems: 2
                  maxItems: 2
                  items:
                    type: string
                description: |
                  A list of examples with labels, in the following format:

                  ```
                  [["The movie is so interesting.", "Positive"], ["It is quite boring.", "Negative"], ...]
                  ```

                  All the label strings will be normalized to be capitalized.

                  You should specify either `examples` or `file`, but not both.
                example:
                  - - A happy moment
                    - Positive
                  - - I am sad.
                    - Negative
                  - - I am feeling awesome
                    - Positive
              file:
                type: string
                description: |
                  The ID of the uploaded file that contains training examples.
                  See [upload file](https://beta.openai.com/docs/api-reference/files/upload) for how to upload a file of the desired format and purpose.

                  You should specify either `examples` or `file`, but not both.
                example: file-ccdDZrC3iZVNiQVeEA6Z66wf
              labels:
                type: array
                items:
                  type: string
                nullable: true
                description: |
                  The set of categories being classified.
                  If not specified, candidate labels will be automatically collected from the examples you provide.
                  All the label strings will be normalized to be capitalized.
              search_model:
                type: string
                default: ada
                description: |
                  ID of the engine to use for [Search](https://beta.openai.com/docs/api-reference/searches/create).
              temperature:
                type: number
                default: 0
                minimum: 0
                maximum: 1
                description: |
                  What sampling `temperature` to use.
                  Higher values mean the model will take more risks.
                  Try 0.9 for more creative applications, and 0 (argmax sampling) for ones with a well-defined answer.
              logprobs:
                type: integer
                nullable: true
                default: null
                description: |
                  Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens.
                  For example, if `logprobs` is 10, the API will return a list of the 10 most likely tokens.
                  The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.

                  When `logprobs` is set, `completion` will be automatically added into `expand` to get the logprobs.
              max_examples:
                type: integer
                minimum: 1
                default: 200
                description: |
                  The maximum number of examples to be ranked by [Search](https://beta.openai.com/docs/api-reference/searches/create) when using `file`.
                  Setting it to a higher value leads to improved accuracy but with increased latency and cost.
              logit_bias:
                $ref: ../index.yaml#/components/schemas/logitBias
              return_prompt:
                type: boolean
                default: false
                description: |
                  If set to `true`, the returned JSON will include a "prompt" field containing the final prompt that was used to request a completion.
                  This is mainly useful for debugging purposes.
              return_metadata:
                type: boolean
                default: false
                description: |
                  A special boolean flag for showing metadata.
                  If set to `true`, each document entry in the returned JSON will contain a "metadata" field.

                  This flag only takes effect when `file` is set.
              expand:
                type: array
                items:
                  type: string
                default: []
                description: |
                  If an object name is in the list, we provide the full information of the object; otherwise, we only provide the object ID.
                  Currently we support `completion` and `file` objects for expansion.
            additionalProperties: false
            required:
              - model
              - query
    responses:
      200:
        description: Ok
        content:
          application/json:
            schema:
              type: object
              properties:
                completion:
                  oneOf:
                    - type: string
                      example: cmpl-2euVa1kmKUuLpSX600M41125Mo9NI
                    - $ref: ../index.yaml#/components/schemas/completion
                label:
                  type: string
                  example: Negative
                model:
                  type: string
                  example: curie:2020-05-03
                object:
                  type: string
                  example: classification
                search_model:
                  type: string
                  example: ada
                selected_examples:
                  type: array
                  items:
                    type: object
                    properties:
                      document:
                        type: integer
                      label:
                        type: string
                      text:
                        type: string
                      metadata: {}
                    additionalProperties: false
                    required:
                      - document
                      - label
                      - text
                  example:
                    - document: 1
                      label: Negative
                      text: I am sad.
                    - document: 0
                      label: Positive
                      text: A happy moment
                    - document: 2
                      label: Positive
                      text: I am feeling awesome
              additionalProperties: false
              required:
                - completion
                - label
                - model
                - object
                - search_model
                - selected_examples
